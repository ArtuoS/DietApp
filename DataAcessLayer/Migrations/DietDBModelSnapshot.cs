// <auto-generated />
using System;
using Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAcessLayer.Migrations
{
    [DbContext(typeof(DietDB))]
    partial class DietDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Entities.Diet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Diets");
                });

            modelBuilder.Entity("Entities.Food", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Alcohol")
                        .HasColumnType("float");

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<double>("Carbohydrate")
                        .HasColumnType("float");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<double>("Copper")
                        .HasColumnType("float");

                    b.Property<int?>("DietID")
                        .HasColumnType("int");

                    b.Property<double>("Fiber")
                        .HasColumnType("float");

                    b.Property<string>("Food_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lipid")
                        .HasColumnType("float");

                    b.Property<double>("Magnesium")
                        .HasColumnType("float");

                    b.Property<double>("Phosphor")
                        .HasColumnType("float");

                    b.Property<double>("Potassium")
                        .HasColumnType("float");

                    b.Property<double>("Protein")
                        .HasColumnType("float");

                    b.Property<int?>("RestrictionID")
                        .HasColumnType("int");

                    b.Property<double>("Selenium")
                        .HasColumnType("float");

                    b.Property<double>("Sodium")
                        .HasColumnType("float");

                    b.Property<double>("Vitamin_A")
                        .HasColumnType("float");

                    b.Property<double>("Vitamin_B12")
                        .HasColumnType("float");

                    b.Property<double>("Vitamin_B6")
                        .HasColumnType("float");

                    b.Property<double>("Vitamin_C")
                        .HasColumnType("float");

                    b.Property<double>("Vitamin_D")
                        .HasColumnType("float");

                    b.Property<double>("Vitamin_E")
                        .HasColumnType("float");

                    b.Property<double>("Zinc")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("DietID");

                    b.HasIndex("RestrictionID");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("Entities.Food_Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Entities.Restriction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Restrictions");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("BodyFat")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date_Of_Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<double>("Heigth")
                        .HasColumnType("float");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weigth")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.Diet", b =>
                {
                    b.HasOne("Entities.User", null)
                        .WithMany("Diets")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Entities.Food", b =>
                {
                    b.HasOne("Entities.Food_Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");

                    b.HasOne("Entities.Diet", null)
                        .WithMany("Foods")
                        .HasForeignKey("DietID");

                    b.HasOne("Entities.Restriction", null)
                        .WithMany("Foods")
                        .HasForeignKey("RestrictionID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Restriction", b =>
                {
                    b.HasOne("Entities.User", null)
                        .WithMany("Restrictions")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Entities.Diet", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("Entities.Restriction", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("Diets");

                    b.Navigation("Restrictions");
                });
#pragma warning restore 612, 618
        }
    }
}
